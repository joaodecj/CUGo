# 3-simulacao.R
source("1-distribuicao_CUGo.R")
source("2-modelo_gamlss.R")
library(gamlss)

# Parâmetros
vn <- c(70)
logit_link <- make.link("logit")
log_link <- make.link("log")
b1 <- 0.7
b2 <- 0.3
g1 <- 2.7
g2 <- -2.25
R <- 1000   # diminuir para teste, depois pode usar 10000

calculate_metrics <- function(mu_result, sigma_result, true_values) {
  mean_values <- c(apply(mu_result, 2, mean, na.rm = TRUE),
                   apply(sigma_result, 2, mean, na.rm = TRUE))
  bias_values <- (true_values - mean_values) / true_values * 100
  eqm_values <- c(apply(mu_result, 2, var, na.rm = TRUE),
                  apply(sigma_result, 2, var, na.rm = TRUE)) + (true_values - mean_values)^2
  result <- cbind("True Value" = true_values,
                  "Mean" = mean_values,
                  "Bias (%)" = bias_values,
                  "EQM" = eqm_values)
  rownames(result) <- c("b1", "b2", "g1", "g2")
  result
}

# Simulação
bug_counter <- 0  
final_results <- data.frame()
p_quantil <- 0.25

for (n in vn) {
  mu_result <- matrix(NA, R, 2)
  sigma_result <- matrix(NA, R, 2)
  X <- runif(n)
  
  mu_true <- logit_link$linkinv(b1 + b2*X)
  sigma_true <- log_link$linkinv(g1 + g2*X)
  
  pb <- txtProgressBar(min = 0, max = R, style = 3)
  i <- 0
  while (i < R) {
    y <- rCUGo(n, mu_true, sigma_true)
    q_emp <- quantile(y, p_quantil)
    mu <- median(y)
    
    # Estima sigma inicial
    f_sigma <- function(sigma) {
      q_teor <- qCUGo(u = p_quantil, mu = mu, sigma = sigma)
      q_teor - q_emp
    }
    res <- uniroot(f_sigma, interval = c(1e-4, 50), tol = 1e-8)
    sigma_est <- res$root
    
    # Ajuste
    fit1 <- try(gamlss(y ~ X, sigma.formula = ~ X,
                       family = CUGo(sigma.link = "log"),
                       sigma.start = sigma_est,
                       c.crit = 0.001, n.cyc = 300, trace = FALSE),
                silent = TRUE)
    
    if (inherits(fit1, "try-error")) {
      bug_counter <- bug_counter + 1
      next
    }
    
    i <- i + 1
    mu_result[i, ] <- fit1$mu.coefficients
    sigma_result[i, ] <- fit1$sigma.coefficients
    setTxtProgressBar(pb, i)
  }
  close(pb)
  
  true_values <- c(b1, b2, g1, g2)
  result <- calculate_metrics(mu_result, sigma_result, true_values)
  result <- as.data.frame(result)
  result$Sample_Size <- n
  final_results <- rbind(final_results, result)
  
  cat("\nTamanho da amostra:", n, "\n")
  print(round(result, 2))
  cat("N de erros no ajuste do modelo:", bug_counter, "\n")
}
